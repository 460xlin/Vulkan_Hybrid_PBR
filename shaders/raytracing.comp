// Shader is looseley based on the ray tracing coding session by Inigo Quilez (www.iquilezles.org)

#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

#define EPSILON 0.0001
#define MAXLEN 1000.0
#define SHADOW 0.5
#define RAYBOUNCES 0
#define REFLECTIONS false
#define REFLECTIONSTRENGTH 0.4
#define REFLECTIONFALLOFF 0.5
#define USE_SOFT true

struct Camera 
{
	vec3 pos;   
	vec3 lookat;
	float fov; 
};

layout (binding = 1) uniform UBO 
{
	vec3 lightPos;
	float aspectRatio;
	vec4 fogColor;
	Camera camera;
	mat4 rotMat;
} ubo;

struct Sphere 
{
	vec3 pos;
	float radius;
	vec3 diffuse;
	float specular;
	int id;
};

struct Plane
{
	vec3 normal;
	float distance;
	vec3 diffuse;
	float specular;
	int id;
};

layout (std140, binding = 2) buffer Spheres
{
	Sphere spheres[ ];
};

layout (std140, binding = 3) buffer Planes // use the assigned size of memory
{
	Plane planes[ ];
};

// Triangle ===========================================================

struct BoundingBox
{
	vec3 maxB;
	vec3 minB;
};


struct Triangle
{
	vec4 trinormal;
	vec4 vert_0;
	vec4 vert_1;
	vec4 vert_2;
	vec4 testColor;

};

layout (std140, binding = 4) buffer Triangles // use the assigned size of memory
{
	Triangle triangles[ ];
} inTriangles;

layout (binding = 5) uniform GEOM 
{
	mat4 transform;
	mat4 inverseTransform;
} geom;


void reflectRay(inout vec3 rayD, in vec3 mormal)
{
	rayD = rayD + 2.0 * -dot(mormal, rayD) * mormal;
}

// Lighting =========================================================

float lightDiffuse(vec3 normal, vec3 lightDir) 
{
	return clamp(dot(normal, lightDir), 0.1, 1.0);
}

float lightSpecular(vec3 normal, vec3 lightDir, float specularFactor)
{
	vec3 viewVec = normalize(ubo.camera.pos);
	vec3 halfVec = normalize(lightDir + viewVec);
	return pow(clamp(dot(normal, halfVec), 0.0, 1.0), specularFactor);
}

// Sphere ===========================================================

float sphereIntersect(in vec3 rayO, in vec3 rayD, in Sphere sphere)
{
	vec3 oc = rayO - sphere.pos;
	float b = 2.0 * dot(oc, rayD);
	float c = dot(oc, oc) - sphere.radius*sphere.radius;
	float h = b*b - 4.0*c;
	if (h < 0.0) 
	{
		return -1.0;
	}
	float t = (-b - sqrt(h)) / 2.0;

	return t;
}

vec3 sphereNormal(in vec3 pos, in Sphere sphere)
{
	return (pos - sphere.pos) / sphere.radius;
}

// Plane ===========================================================

float planeIntersect(vec3 rayO, vec3 rayD, Plane plane)
{
	float d = dot(rayD, plane.normal);

	if (d == 0.0)
		return 0.0;

	float t = -(plane.distance + dot(rayO, plane.normal)) / d;

	if (t < 0.0)
		return 0.0;

	return t;
}

// // Triangle ===========================================================

vec3 getPointOnRay(vec3 rayO, vec3 rayD, float t) {
    return rayO + (t - .0001f) * normalize(rayD);
}

vec3 multiplyMV(mat4 m, vec4 v) {
	return vec3(m * v);
}




bool intersectRayTriangle
(	vec3 orig, vec3 dir,
	vec3 vert0, vec3 vert1, vec3 vert2,
	inout vec2 baryPosition, inout float distance
)
{
	// find vectors for two edges sharing vert0
	vec3 edge1 = vert1 - vert0;
	vec3 edge2 = vert2 - vert0;

	// begin calculating determinant - also used to calculate U parameter
	vec3 p = cross(dir, edge2);

	// if determinant is near zero, ray lies in plane of triangle
	float det = dot(edge1, p);

	vec3 qvec;

	if (det > EPSILON)
	{
		// calculate distance from vert0 to ray origin
		vec3 tvec = orig - vert0;

		// calculate U parameter and test bounds
		baryPosition.x = dot(tvec, p);
		if (baryPosition.x < 0.0f || baryPosition.x > det)
			return false;

		// prepare to test V parameter
		qvec = cross(tvec, edge1);

		// calculate V parameter and test bounds
		baryPosition.y = dot(dir, qvec);
		if ((baryPosition.y < 0.0f) || ((baryPosition.x + baryPosition.y) > det))
			return false;
	}
	else if (det < EPSILON)
	{
		// calculate distance from vert0 to ray origin
		vec3 tvec = orig - vert0;

		// calculate U parameter and test bounds
		baryPosition.x = dot(tvec, p);
		if ((baryPosition.x > 0.0f) || (baryPosition.x < det))
			return false;

		// prepare to test V parameter
		qvec = cross(tvec, edge1);

		// calculate V parameter and test bounds
		baryPosition.y = dot(dir, qvec);
		if ((baryPosition.y > 0.0f) || (baryPosition.x + baryPosition.y < det))
			return false;
	}
	else
		return false; // ray is parallel to the plane of the triangle

	float inv_det = 1.0f / det;

	// calculate distance, ray intersects triangle
	distance = dot(edge2, qvec) * inv_det;
	baryPosition *= inv_det;

	return true;
}


float triangleIntersectionTest(vec3 rRayO, vec3 rRayD,
	// inout vec3 intersectionPoint,
	//  inout vec3 normal,
	 Triangle tri)
{
	// vec3 qRayO = multiplyMV(geom.inverseTransform, vec4(rRayO, 1.0f));
	// vec3 qRayD = normalize(multiplyMV(geom.inverseTransform, vec4(rRayD, 0.0f)));
	vec3 qRayO = rRayO;
	vec3 qRayD = rRayD;
	vec2 bary;
	float temp_distance;

	float t = MAXLEN;
	if (intersectRayTriangle(rRayO, rRayD, tri.vert_0.xyz, tri.vert_1.xyz, tri.vert_2.xyz, bary, temp_distance)) {
		t = temp_distance;
	}

	// vec3 objspaceIntersection = getPointOnRay(qRayO, qRayD, t);
	//normal = glm::normalize(glm::cross(tri.Triverts[0].pos - tri.Triverts[1].pos, tri.Triverts[0].pos - tri.Triverts[2].pos))/*tri.Trinormal*/;
	// normal = tri.trinormal;
	// normal = normalize(multiplyMV(geom.transform, vec4(normal, 0.0f)));

	return t;
}

// Triangle end ===========================================================

bool intersect(in vec3 rayO, in vec3 rayD, inout float resT, inout int triIndex)
{

	bool beHit = false;
	// buffer length, the num of spheres
	for (int i = 0; i < spheres.length(); i++)
	{
		float tSphere = sphereIntersect(rayO, rayD, spheres[i]);
		if ((tSphere > EPSILON) && (tSphere < resT))
		{
			beHit = true;
			triIndex = spheres[i].id;
			resT = tSphere;
		}
	}	

	for (int i = 0; i < planes.length(); i++)
	{
		float tplane = planeIntersect(rayO, rayD, planes[i]);
		if ((tplane > EPSILON) && (tplane < resT))
		{
			beHit = true;
			triIndex = planes[i].id;
			resT = tplane;
		}	
	}


	for (int i = 0; i < inTriangles.triangles.length(); i++)
	{
		float tTri = triangleIntersectionTest(rayO, rayD, inTriangles.triangles[i]);
		if ((tTri > EPSILON) && (tTri < resT))
		{
			// if(!outside)
			// {
				beHit = true;
				triIndex = 99999;
				resT = tTri;
			// }
		}
	}

	
	return beHit;
}

// rayO: intersection point
// rayD: light Direction
// objectId: the object id where the intersection is
// t: the distance from light to the intersection point;
float calcShadow(in vec3 rayO, in vec3 rayD, in int objectId, inout float t)
{
	for (int i = 0; i < spheres.length(); i++)
	{
		if (spheres[i].id == objectId)
			continue;
		float tSphere = sphereIntersect(rayO, rayD, spheres[i]);
		if ((tSphere > EPSILON) && (tSphere < t))
		{
			t = tSphere;
			if(USE_SOFT)
			{
				return 0.5;
			}
			else{
				return 0.0;
			}
		}
	}



	return 1.0;
}


vec3 renderScene(inout vec3 rayO, inout vec3 rayD, inout int id)
{
	vec3 color = vec3(0.0);
	float t = MAXLEN;

	// Get intersected object ID
	int triIndex = -1;

	// t will be modified
	bool beHit = intersect(rayO, rayD, t, triIndex); 
	
	if (!beHit) // ray does not reach anything
	{
		return color;
	}
	
	if( t > MAXLEN - 1)
	{
		return color;
	}

	vec3 pos = rayO + t * rayD;// the pos of intersection point, t is the length from camera to intersection point
	vec3 lightVec = normalize(ubo.lightPos - pos);				
	vec3 normal;

	// Planes

	// Spheres

	for (int i = 0; i < planes.length(); i++)
	{
		if (triIndex == planes[i].id)
		{
			normal = planes[i].normal;
			color = planes[i].diffuse;
		}
	}

	for (int i = 0; i < spheres.length(); i++)
	{
		if (triIndex == spheres[i].id)
		{
			normal = sphereNormal(pos, spheres[i]);				
			color = vec3(1.0, 0.0, 0.0);	// diffuse is the diffuse color of sphere
		}
	}

	if(triIndex == 99999)
	{
		color = vec3(0.0, 0.0, 0.0);

	}

	// if (id == -1)
	// 	return color;

	// id = triIndex;

	// Shadows
	// t = length(ubo.lightPos - pos); // the t of position from light to intersection
	// color *= calcShadow(pos, lightVec, id, t);

	
	// Reflect ray for next render pass
	// RayO now is the point of intersection
	//reflectRay(rayD, normal);
	//rayO = pos;	
	
	return color;
}

void main()
{
	vec3 camPos = vec3(0.0f, 0.0f, 4.0f);
	ivec2 dim = imageSize(resultImage); // retrieve the dimensions of an image

	// gl_GlobalInvocationID is the the pos coordinats of resolution:800 / 600
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	// vec3 rayO = ubo.camera.pos;
	vec3 rayO = camPos;
	vec3 rayD = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ubo.aspectRatio, 1.0), -1.0));// why z is -1.0?
		
	// Basic color path
	int id = 0;
	vec3 finalColor = renderScene(rayO, rayD, id);
	// finalColor = vec3(triangles[0].triverts[0].pos.y);
	// finalColor = vec3(triangles[0].trinormal);
	// finalColor = vec3(triangles[0].testColor.y);


	// finalColor = vec3(triangles[0].triidx);

	// finalColor = vec3(planes[0].normal);

	// finalColor = vec3(inTriangles.triangles[0].testColor);

			
	// imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 0.0));
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 1.0));
}